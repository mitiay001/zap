class BankAccount:
   def __init__(self, initial_balance=0):
       self.balance = initial_balance

   def deposit(self, amount):
       self.balance += amount

   def withdraw(self, amount):
       if amount > self.balance:
           print("Недостаточно средств на счете.")
       else:
           self.balance -= amount

   def check_balance(self):
       return self.balance

# Класс BankAccount определяет банковский аккаунт. У него есть три метода:

# __init__(self, initial_balance=0): Это метод-конструктор, который инициализирует объект класса BankAccount. Он принимает необязательный аргумент initial_balance, который устанавливает начальный баланс аккаунта. Если initial_balance не указан, то начальный баланс равен 0. Метод сохраняет начальный баланс в переменную self.balance.

# deposit(self, amount): Этот метод позволяет пополнить баланс аккаунта. Он принимает аргумент amount, который представляет сумму для пополнения. Метод увеличивает текущий баланс self.balance на указанную сумму amount.

# withdraw(self, amount): Этот метод позволяет снять деньги со счета. Он принимает аргумент amount, который представляет сумму для снятия. Метод проверяет, достаточно ли средств на счете (amount > self.balance). Если средств достаточно, то метод уменьшает текущий баланс self.balance на указанную сумму amount. Если средств недостаточно, то метод выводит сообщение о недостаточности средств на счете.

# check_balance(self): Этот метод позволяет проверить текущий баланс аккаунта. Он возвращает значение текущего баланса self.balance.


def show_menu():
   print("Меню:")
   print("1. Снятие наличных")
   print("2. Пополнение баланса")
   print("3. Проверка баланса")
   print("4. Выход")

#Функция show_menu() выводит на экран меню с вариантами операций, которые пользователь может выбрать.


initial_balance = float(input("Введите сумму начального баланса: "))
account = BankAccount(initial_balance)

#В этой части кода пользователю предлагается ввести сумму начального баланса. Затем создается объект account класса BankAccount с указанным начальным балансом.

while True:
   show_menu()
   choice = input("Выберите операцию (1-4): ")

   if choice == "1":
       amount = float(input("Введите сумму для снятия: "))
       account.withdraw(amount)
       print("Снято", amount, "евро.")

   elif choice == "2":
       amount = float(input("Введите сумму для пополнения: "))
       account.deposit(amount)
       print("Баланс пополнен на", amount, "евро.")

   elif choice == "3":
       balance = account.check_balance()
       print("Текущий баланс:", balance, "евро.")

   elif choice == "4":
       print("Программа завершена.")
       break

   else:
       print("Неверный выбор. Попробуйте снова.")

#

# В этой части кода используется цикл while True, который будет продолжаться до тех пор, пока не будет выбран вариант "Выход" из меню.

# В каждой итерации цикла выводится меню с помощью функции show_menu().

# Затем пользователю предлагается выбрать операцию, введя число от 1 до 4.

# Если пользователь выбирает операцию "Снятие наличных" (вводит "1"), запрашивается сумма для снятия с помощью функции input(). Сумма преобразуется в тип float и передается в метод withdraw() объекта account. Если сумма превышает баланс, выводится сообщение о недостаточности средств, иначе выводится сообщение о снятии указанной суммы.

# Если пользователь выбирает операцию "Пополнение баланса" (вводит "2"), запрашивается сумма для пополнения с помощью функции input(). Сумма преобразуется в тип float и передается в метод deposit() объекта account. Выводится сообщение о пополнении баланса указанной суммой.

# Если пользователь выбирает операцию "Проверка баланса" (вводит "3"), вызывается метод check_balance() объекта account, и текущий баланс выводится на экран.

# Если пользователь выбирает операцию "Выход" (вводит "4"), выводится сообщение о завершении программы, и цикл while прерывается с помощью ключевого слова break.

# Если пользователь вводит любое другое значение, выводится сообщение о неверном выборе и цикл продолжается снова.
